Q.1 Consider a system with 'm' processes and 'n' resource types. 
Accept number of instances for every resource type.
For each process accept the allocation and maximum requirement matrices.
Write a program to display the contents of need matrix and to check if the
given request of a process can be granted immediately or not

Ans:- 

#include <stdio.h> 
 #define MAX_PROCESS 100 
#define MAX_RESOURCES 100 
 
int allocation[MAX_PROCESS][MAX_RESOURCES]; 
int maximum[MAX_PROCESS][MAX_RESOURCES]; 
int need[MAX_PROCESS][MAX_RESOURCES]; 
int available[MAX_RESOURCES];
int work[MAX_RESOURCES]; 
int finish[MAX_PROCESS]; 
 
int m, n; 
 
void displayNeedMatrix() 
{ 
    printf("\nNeed Matrix:\n"); 
 
    for (int i = 0; i < m; i++) 
    {         for (int j = 0; j < n; j++)
    {             need[i][j] = maximum[i][j] - allocation[i][j];     
    printf("%d ", need[i][j]); 
        }         printf("\n"); 
    } 
} 
 
int isSafeState() 
{     for (int i = 0; i < n; i++) 
work[i] = available[i]; 
 
    for (int i = 0; i < m; i++)  
    finish[i] = 0; 
 
    int count = 0;     
    while (count < m) 
    {       
    int found = 0;       
    for (int i = 0; i < m; i++)
    {          
    if (!finish[i])
    {                 
    int j;               
    for (j = 0; j < n; j++)
    {                    
    if (need[i][j] > work[j])                      
    break; 
                } 
                if (j == n) 
                {               
                for (j = 0; j < n; j++)          
                work[j] += allocation[i][j];                     
                finish[i] = 1;                     
                found = 1;                    
                count++; 
                } 
            }     
            }       
            if (!found)      
            break; 
    } 
 
    if (count == m)        
    return 1;     
    else         
    return 0; 
} 
 
int requestResources(int pid, int request[]) 
{    
for (int i = 0; i < n; i++) 
{       
if (request[i] > need[pid][i])     
return 0; 
 
        if (request[i] > available[i])           
        return 0; 
    } 
     for (int i = 0; i < n; i++)
     {         allocation[pid][i] += request[i]; 
     available[i] -= request[i]; 
    } 
 
    if (isSafeState())        
    return 1;  
    else {   
    for (int i = 0; i < n; i++)
    {             allocation[pid][i] -= request[i];       
    available[i] += request[i]; 
       
       }       return 0; 
    } 
} 
 
int main() 
{ 
    printf("Enter the number of processes: ");
    scanf("%d", &m); 
 
    printf("Enter the number of resource types: ");    
    scanf("%d", &n); 
 
    printf("Enter the number of instances for each resource type:\n");    
    for (int i = 0; i < n; i++)         
    scanf("%d", &available[i]); 
 
    printf("Enter the allocation matrix:\n");    
    for (int i = 0; i < m; i++)       
    for (int j = 0; j < n; j++) 
            
  scanf("%d", &allocation[i][j]); 
 
    printf("Enter the maximum requirement matrix:\n");    
    for (int i = 0; i < m; i++)     
    for (int j = 0; j < n; j++)          
    
   scanf("%d", &maximum[i][j]); 
 
    displayNeedMatrix(); 
     int pid;  
     printf("Enter the process ID for which" );
     }
 




Q.2 Write a simulation program for disk scheduling using SSTF algorithm.
Accept total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments. 
 
24, 90, 133, 43, 188, 70, 37, 55. 
 
Start Head Position: 58 
 
Ans:- 
#include <stdio.h> 
#include <stdlib.h> 
#include <limits.h> 
 
void sstf(int queue[], int n, int head) 
{     int i, j, min, pos, count = 0; 
int visited[n]; 
     for (i = 0; i < n; i++)
     {         visited[i] = 0; 
    } 
 
    printf("%d -> ", head);  
    visited[head] = 1;     
    count++; 
 
    while (count < n)
    {         min = INT_MAX; 
        for (i = 0; i < n; i++)
        {             
        if (!visited[i]) 
        {                 if (abs(queue[i] - head) < min)
        {                     min = abs(queue[i] - head);      
        pos = i; 
                } 
            } 
        } 
 
        visited[pos] = 1;        
        count++;        
        head = queue[pos];      
        printf("%d -> ", head); 
    } 
} 
 
int main() 
{     int n, i, head;    
printf("Enter the total number of disk blocks: ");   
scanf("%d", &n);     
int queue[n]; 
 
    printf("Enter the disk request string:\n");   
    for (i = 0; i < n; i++) 
    {         scanf("%d", &queue[i]); 
    } 
 
    printf("Enter the current head position: ");    
    scanf("%d", &head); 
 
    sstf(queue, n, head); 
 
    printf("\nTotal number of head movements: %d", n); 
 
    return 0; 
} 
