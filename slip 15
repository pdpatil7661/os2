Q.1	Write a program to simulate Linked file allocation method.
Assume disk with n number of blocks. Give value of n as input.
Randomly mark some block as allocated and accordingly maintain the list of free blocks Write menu driver program with menu options as mentioned below and implement each option.
•	Show Bit Vector
•	Create New File
•	Show Directory
•	Exit
Ans 
#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 
struct file
{
char filename[20]; 
int filesize;
int startblock;
int endblock;
};
typedef struct file f; 
struct node
{
int blockno; 
struct node *next;
};
typedef struct node block;
block *freelist=NULL,*allocate=NULL,*lasta=NULL;
f f1[20];
int no=1,d,size,count=1,countfblock=0; 
block *getblock()
{
block *temp;
temp=(block *)malloc(sizeof(block));
temp->blockno=no;
no++;
temp->next=NULL; 
return(temp);
}
block * addblock(block *ptr)
{
block *temp;
temp=(block *)malloc(sizeof(block)); 
temp->blockno=ptr->blockno;
temp->next=NULL; return(temp);
}
block *create()
{
block *temp,*last=NULL,*list=NULL; int i;
 
for(i=0;i<d;i++)
{
temp=getblock(); if(list==NULL)
{
list=temp; 
last=temp;
}
else
{
last->next=temp; 
last=temp;
}
}
return(list);
}
block *createalloclist()
{
block *temp,*ptr=freelist,*prev; 
int i;
f1[count].startblock=ptr->blockno;
for(i=0;i<f1[count].filesize && ptr!=NULL;i++)
{
temp=addblock(ptr); 
f1[count].endblock=temp->blockno;
prev=ptr;
freelist=ptr->next; ptr=ptr->next;
if(allocate==NULL)
{
allocate=temp;
lasta=temp;
}
else
{
lasta->next=temp; lasta=temp;
}
}
return(allocate);
}

{
 
printf("\nEnter the file name:");
scanf("%s",&f1[count].filename);
printf("\nEnter file size in blocks:"); 
scanf("%d",&f1[count].filesize);
}

void displayfile()
{
int i;
printf("\nFile name\t\tFile size\t\tstart block\t\tEnd block"); 
for(i=1;i<=count;i++)
{
printf("\n%s",f1[i].filename); 
printf("\t\t\t%d",f1[i].filesize); 
printf("\t\t\t%d",f1[i].startblock); 
printf("\t\t\t%d",f1[i].endblock);
}
}
int main()
{
int ch,result; char fname[20];
printf("\nEnter the size of disk in blocks"); 
scanf("%d",&d);
freelist=create(); 
while(1)
{
printf("\n1: Allocate space for newly created file.");
printf("\n2: Show used and free space on disk.");
printf("\n3: Exit");
printf("\nEnter the choice"); 
scanf("%d",&ch);
switch(ch)
{
case 1:
acceptfile();
countfree(freelist);
if(countfblock>=f1[count].filesize)
{
allocate=createalloclist(); displayfile();
count++;
}
else
printf("\nNo sufficient space to allocate");
break;
case 2: printf("\nFree list:"); displaylist(freelist);
printf("\nAllocated list: ");
 
displaylist(allocate);
break;
case 3:
exit(0);
}
}
}


Q.2	Write a simulation program for disk scheduling using C-SCAN algorithm. Accept total
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments..
80, 150, 60,135, 40, 35, 170
Starting Head Position: 70 Direction: Right
Ans 
#include<stdio.h>
#include<stdlib.h>
int main()
{
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move; 
printf("Enter the number of Requests\n"); 
scanf("%d",&n);
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++)
scanf("%d",&RQ[i]);
printf("Enter initial head position\n");
scanf("%d",&initial);
printf("Enter total disk size\n");
scanf("%d",&size);
printf("Enter the head movement direction for high 1 and for low 0\n"); 
scanf("%d",&move);

// logic for C-Scan disk scheduling
/*logic for sort the request array */ 
for(i=0;i<n;i++)
{
for( j=0;j<n-i-1;j++)
{
if(RQ[j]>RQ[j+1])
{
int temp; temp=RQ[j]; 
RQ[j]=RQ[j+1];
RQ[j+1]=temp;
}
}
}
 
int index; 
for(i=0;i<n;i++)
{
if(initial<RQ[i])
{
index=i;
break;
}
}
// if movement is towards high value 
if(move==1)
{
for(i=index;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); initial=RQ[i];
}
// last movement for max size 
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
/*movement max to min disk */ 
TotalHeadMoment=TotalHeadMoment+abs(size-1-0); 
initial=0;
for( i=0;i<index;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i];
}
}
// if movement is towards low value else
{
for(i=index-1;i>=0;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i];
}
// last movement for min size 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
/*movement min to max disk */
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial =size-1;
for(i=n-1;i>=index;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
printf("Total head movement is %d",TotalHeadMoment);
return 0;
}
