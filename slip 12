Q.1 Write a program to simulate Contiguous file allocation method.
Assume disk with n number of blocks. Give value of n as input. 
Randomly mark some block as allocated and accordingly maintain the list of free blocks
Write menu driver program with menu options as mentioned above and implement each option. 
•	Show Bit Vector 
•	Create New File 
•	Show Directory 
•	Exit 
Ans  
 #include<stdio.h>  
#include<string.h> 
#include<stdlib.h>  
struct freelist  
{  int start;  int size;  
struct freelist *next;  
};  
struct usedlist  
{  
char fname[10];  
int fstart;  
int fsize;  
};  
struct freelist *head=NULL,*new=NULL,*temp,*prev,*temp1;  
struct usedlist dir_ent[10]; 
int dir_index=0;  main()  
{  int ch,i;  
char filename[10];  
create(); 
do 
{  
printf("\n*****menu*******\n"); 
printf("1.Create file\n");  
printf("2. Show Free and Used Block list\n");  
printf("3. exit\n");  
printf("Enter your choice: ");
scanf("%d",&ch);  
switch(ch)  
{  
case 1: allocate(); 
break;  
case 2: printf("\nThe free list is");
printf("\nStartBlock\tSize\n");  
for (temp=head;temp!=NULL; temp=temp->next)  
{  
printf("%d",temp->start);  
printf("\t%d\n",temp->size);  
}  
printf("The used list is"); 
printf("\nFilename\tStart\tLength\n");  
for(i=0;i<dir_index;i++)  
{  
printf("%s\t%d\t\t%d\n",dir_ent[i].fname,dir_ent[i].fstart,dir_ent[i].fsize);  
}  
break; 
case 3: exit(0); 
break; 
}  
}while (ch!=3);  
}  
create()  
{  
int no_of_blocks;  
printf("Enter number of blocks\n"); 
scanf("%d",&no_of_blocks);
new = (struct freelist*)malloc(sizeof(struct freelist));
head=new;
new->start=0;  
new->size=no_of_blocks; 
new->next=NULL;  
}  
allocate()  
{  
int s, allocated=0;
char filename[10]; 
printf("enter file name \n");  
scanf("%s",filename);  
printf("enter size of a file in blocks\n");  
scanf("%d",&s);  
for(temp=head;temp!=NULL;)  
{  
if(temp->size < s)  temp=temp->next;  else 
{ 
//temp->size-=s;  
strcpy(dir_ent[dir_index].fname,filename); 
dir_ent[dir_index].fstart=temp->start;
temp->start+=s;  dir_ent[dir_index].fsize=s;
dir_index++;  
allocated=1;
break;  
}  
if (temp==NULL && allocated==0)  
printf("Disk space not available\n");  
}  }



Q.2 Write a simulation program for disk scheduling using C-LOOK algorithm.
Accept total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments.

#include<stdio.h>
int ReqString[20],nor,nob,start,thm,min[10],max[10];
 
char direction; int getmin()
{
int i,j=0,min=999; 
for(i=0;i<nor;i++) 
if(ReqString[i]<=min) 
min=ReqString[i];
return min;
}
int getmax()
{
int i,j=0,max=0; for(i=0;i<nor;i++) if(ReqString[i]>max) max=ReqString[i];
return max;
}
void sort(int RS[])
{
int i,j,temp;
for(i=1;i<nor;i++)
{
for(j=0;j<nor-i;j++)
{ if(RS[j]>RS[j+1])
{
temp=RS[j];
RS[j]=RS[j+1];
RS[j+1]=temp;
}
}
}
}
main()
{
int i,j,k,max,min,spos; 
printf("\nEnter No.of Requests: "); 
scanf("%d",&nor);
printf("\nEnter Requests:\n"); 
for(i=0;i<nor;i++)
{
printf("[%d]=",i);
scanf("%d",&ReqString[i]);
}
 
printf("\nEnter No.of Cylinders: ");
scanf("%d",&nob);
printf("\nEnter Start Block: ");
scanf("%d",&start);
ReqString[nor++]=start;
sort(ReqString); 
for(i=0;i<nor;i++)
printf(" %d",ReqString[i]);
for(spos=0;spos<=nor && ReqString[spos]!=start; spos++);
printf("\nEnter Direction: ");
scanf(" %c",&direction);
min=getmin(); 
max=getmax();
if(direction=='L')
{
printf("\n%d-%d",start,ReqString[0]);
thm+=start-ReqString[0];
printf("\n%d-%d",max,ReqString[spos+1]); 
thm+=max-ReqString[spos+1];
}
else if(direction=='R')
{
printf("\n%d-%d",max,start);
thm+=max-start;
printf("\n%d-%d",ReqString[spos-1],min);
thm+=ReqString[spos-1]-min;
}
printf("\nTotal Head Movement: %d",thm);
}
