Q.1	Write a C program to simulate Banker’s algorithm for the purpose of deadlock avoidance. 
 the following snapshot of system, A, B, C and D are the resource type.
                           Process	  Allocation	     Max	    Available
                                     	A	B	C	        A	B	C	     A	B	C
                             P0	      0	1	0	        0	0	0	     0	0	0
                             P1	      2	0	0	        2	0	2			
                             P2	      3	0	3	        0	0	0			
                             P3	      2	1	1	        1	0	0			
                             P4	      0	0	2         0	0	2			
Implement the following Menu.
a)	Accept Available
b)	Display Allocation, Max
c)	Display the contents of need matrix
d)	Display Available 
Ans 
#include<stdio.h>
int A[10][10], M[10][10], N[10][10];
int AV[10], Safe[10], Finish[10], R[10][10], nor, nop; void AcceptData(intX[][10])
{
int i, j;
for (i = 0; i < nop; i++)
{
printf("P%d\n", i);
for (j = 0; j < nor; j++)
{
printf("%c:", 65 + j); scanf("%d", &X[i][j]);
}
 
}
}
void AcceptAvailable()
{
int i;
for (i = 0; i < nor; i++)
{
printf("%c:", 65 + i);
scanf("%d", &AV[i]);
}
}
void AcceptRequest(intR[][10])
{
int i;
for (i = 0; i < nor; i++)
{
printf("%c:", 65 + i);
scanf("%d", &R[i]);
}
}
void DisplayData()
{
int i, j; printf("\n\tAllocation\t\tMax\t\tNeed\n"); printf("\t"); for (i = 0; i < 3; i++)
{
for (j = 0; j < nor; j++)
{
printf("%4c", 65 + j);
}
printf("\t");
}
for (i = 0; i < nop; i++)
{
printf("\nP%d\t", i); for (j = 0; j < nor; j++)
{
printf("%4d", A[i][j]);
}
printf("\t");
for (j = 0; j < nor; j++)
{
printf("%4d", M[i][j]);
}
printf("\t");

for (j = 0; j < nor; j++) printf("%4d", N[i][j]);
}
printf("\nAvailable\n"); for (j = 0; j < nor; j++)
{
printf("%4d", AV[j]);
}
}

void CalcNeed()
{
int i, j;
 
for (i = 0; i < nop; i++)
{
for (j = 0; j < nor; j++)
{
N[i][j] = M[i][j] - A[i][j];
}
}
}
int CheckNeed(intpno)
{
int i;
for (i = 0; i < nor; i++)
{
if (N[pno][i] > AV[i])
{
return 0;
}
}
return 1;
}
int main()
{
printf("\nEnter Number of Process :"); 
scanf("%d", &nop); printf("\nEnter Number of Resources :"); 
scanf("%d", &nor); printf("Enter Allocation\n"); 
AcceptData(A);
printf("Enter MAX Requirement\n"); 
AcceptData(M); 
printf("Enter Availability\n"); 
AcceptAvailable(); 
CalcNeed(); 
DisplayData();
}


Q.2 Write a simulation program for disk scheduling using C-LOOK algorithm. Accept total number of disk blocks, disk request string, and current head position from the user. Display the list of request in the order in which it is served. Also display the total number of head moments.

#include<stdio.h>
int ReqString[20],nor,nob,start,thm,min[10],max[10];
 
char direction; int getmin()
{
int i,j=0,min=999; for(i=0;i<nor;i++) if(ReqString[i]<=min) min=ReqString[i]; return min;
}
int getmax()
{
int i,j=0,max=0; for(i=0;i<nor;i++) if(ReqString[i]>max) max=ReqString[i]; return max;
}
void sort(int RS[])
{
int i,j,temp; for(i=1;i<nor;i++)
{
for(j=0;j<nor-i;j++)
{ if(RS[j]>RS[j+1])
{
temp=RS[j];
RS[j]=RS[j+1];
RS[j+1]=temp;
}
}
}
}
main()
{
int i,j,k,max,min,spos; printf("\nEnter No.of Requests: "); scanf("%d",&nor);
printf("\nEnter Requests:\n"); for(i=0;i<nor;i++)
{
printf("[%d]=",i);
scanf("%d",&ReqString[i]);
}
 
printf("\nEnter No.of Cylinders: "); scanf("%d",&nob);
printf("\nEnter Start Block: "); scanf("%d",&start); ReqString[nor++]=start; sort(ReqString); for(i=0;i<nor;i++)
printf(" %d",ReqString[i]);
for(spos=0;spos<=nor && ReqString[spos]!=start; spos++); printf("\nEnter Direction: ");
scanf(" %c",&direction); min=getmin(); max=getmax(); if(direction=='L')
{
printf("\n%d-%d",start,ReqString[0]); thm+=start-ReqString[0];
printf("\n%d-%d",max,ReqString[spos+1]); thm+=max-ReqString[spos+1];
}
else if(direction=='R')
{
printf("\n%d-%d",max,start); thm+=max-start;
printf("\n%d-%d",ReqString[spos-1],min); thm+=ReqString[spos-1]-min;
}
printf("\nTotal Head Movement: %d",thm);
}


