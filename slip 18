Q.1 Write a program to simulate Indexed file allocation method.
Assume disk with n number of blocks. Give value of n as input. 
Randomly mark some block as allocated and accordingly maintain the list of free blocks 
Write menu driver program with menu options as mentioned above and implement each option. 
 
Show Bit Vector 
Create New File Show Directory 
Delete File 
Exit 
 
Ans:- 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
 
// function to display the bit vector 
void showBitVector(int* bitVector, int n)
{     printf("Bit Vector: ");     
for (int i = 0; i < n; i++) 
{         printf("%d ", bitVector[i]); 
    } 
    printf("\n"); 
} 
 
// function to create a new file 
void createNewFile(int* bitVector, int n, int* directory)
{     int fileSize, numBlocks;     
printf("Enter the file size: ");    
scanf("%d", &fileSize);    
numBlocks = (fileSize + 511) / 512; // 512 bytes per block    
int freeBlocks[numBlocks];    
int freeBlockCount = 0;   
for (int i = 0; i < n; i++) 
{         if (bitVector[i] == 0)
{             freeBlocks[freeBlockCount++] = i;      
if (freeBlockCount == numBlocks)
{                 break; 
            } 
        } 
    } 
    if (freeBlockCount != numBlocks)
    {         printf("Not enough free space!\n");   
    return;     }    
    int fileId;    
    for (fileId = 0; directory[fileId] != -1; fileId++);
    directory[fileId] = freeBlocks[0];   
    for (int i = 0; i < numBlocks; i++)
    {         bitVector[freeBlocks[i]] = 1;     
    if (i < numBlocks - 1) 
    {             bitVector[freeBlocks[i]] = freeBlocks[i + 1]; 
        } 
        else 
        {             bitVector[freeBlocks[i]] = -1; 
        } 
    } 
    printf("File created with ID %d\n", fileId); 
} 
 
// function to display the directory 
void showDirectory(int* directory) 
{     printf("Directory:\n");   
for (int i = 0; directory[i] != -1; i++)
{         printf("%d: block %d\n", i, directory[i]); 
    } 
} 
 
// function to delete a file 
void deleteFile(int* bitVector, int* directory)
{     int fileId; 
    printf("Enter the ID of the file to delete: ");    
    scanf("%d", &fileId);    
    if (directory[fileId] == -1) 
    {         printf("File not found!\n");  
    return; 
    } 
    int blockId = directory[fileId];  
    while (blockId != -1)
    {         bitVector[blockId] = 0; 
        blockId = bitVector[blockId + 1]; 
    } 
    directory[fileId] = -1;  
    printf("File deleted\n"); 
} 
 
// main function
int main()
{     srand(time(NULL)); 
    int n;   
    printf("Enter the number of blocks on the disk: "); 
    scanf("%d", &n);
    int bitVector[n];     
    for (int i = 0; i < n; i++) 
    {         bitVector[i] = rand() % 2; // randomly mark some blocks as allocated 
    } 
    int directory[n];   
    for (int i = 0; i < n; i++)
    {         directory[i] = -1; // initialize directory with -1 (empty) 
    } 
    int choice;    
    do {         printf("\n1. Show Bit Vector\n2. Create New File\n3. Show Directory\n4. Delete File\n5. Exit\n");         
    printf("Enter your choice: ");    
    scanf("%d", &choice);         
    switch (choice)
    {             case 1:             
                      showBitVector(bitVector, n);                
                      break;             
                  case 2:              
                         createNewFile(bitVector, n, directory);               
                         break;           
                  case 3: 
                      showDirectory(directory); 
                break;            
                case 4:              
                deleteFile(bitVector, directory);           
                break;          
                case 5:                
                printf("Exiting...\n");           
                break;             
                default: 
                printf("Invalid choice!\n"); 
        } 
    } while (choice != 5);    
    return 0; 
} 
 






Q.2 Write a simulation program for disk scheduling using SCAN algorithm. 
Accept total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments
33, 99, 142, 52, 197, 79, 46, 65 Start Head Position: 72 Direction: Right 
 
Ans:- 
#include <stdio.h> 
#include <stdlib.h> 
 
#define MAX_SIZE 100 
 
void swap(int *a, int *b) 
{     int temp = *a;   
*a = *b; 
    *b = temp; 
} 
 
void sort(int arr[], int size)
{     
for (int i = 0; i < size - 1; i++)
{         for (int j = i + 1; j < size; j++)
{             if (arr[i] > arr[j])
{                 swap(&arr[i], &arr[j]); 
            } 
        } 
    } 
} 
 
int main() { 
    int total_blocks, head_pos, num_requests, requests[MAX_SIZE], i, j, k, pos, direction, head_moments; 
 
    // Accept inputs from user     
    printf("Enter total number of disk blocks: ");    
    scanf("%d", &total_blocks); 
 
    printf("Enter the disk request string (up to %d requests): ", MAX_SIZE);    
    for (i = 0; i < MAX_SIZE; i++)
    {         scanf("%d", &requests[i]);        
    if (requests[i] == -1)
    {             break; 
        } 
    } 
    num_requests = i; 
 
    printf("Enter current head position: ");    
    scanf("%d", &head_pos); 
 
    printf("Enter direction (0 for left, 1 for right): ");
    scanf("%d", &direction); 
 
    // Add current head position to requests     
    requests[num_requests++] = head_pos; 
 
    // Sort requests in ascending order     
    sort(requests, num_requests); 
 
    // Find index of head position    
    for (i = 0; i < num_requests; i++)
    {         if (requests[i] == head_pos)
    {             break; 
        } 
    }     pos = i; 
 
    // Serve requests in SCAN order   
    head_moments = 0;    
    printf("Order of request served:\n");   
    if (direction == 1) 
    {  // Right      
    for (i = pos; i < num_requests; i++)
    {             printf("%d ", requests[i]);     
    head_moments += abs(requests[i] - head_pos);          
    head_pos = requests[i]; 
        } 
        for (i = num_requests - 2; i >= 0; i--)
        {             printf("%d ", requests[i]);
        head_moments += abs(requests[i] - head_pos);   
        head_pos = requests[i]; 
        } 
    } else 
    {  // Left     
    for (i = pos; i >= 0; i--) 
    {             printf("%d ", requests[i]);
    head_moments += abs(requests[i] - head_pos); 
    head_pos = requests[i]; 
        } 
        for (i = 1; i < num_requests; i++)
        {             printf("%d ", requests[i]);   
        head_moments += abs(requests[i] - head_pos);   
        head_pos = requests[i]; 
        } 
    } 
 
    printf("\nTotal number of head movements: %d\n", head_moments); 
 
    return 0; 
} 
