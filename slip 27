Q.1 Write a simulation program for disk scheduling using LOOK algorithm. 
Accept total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments. 
 
176, 79, 34, 60, 92, 11, 41, 114 Starting Head Position: 65 
 
Direction: Right 
Ans:- 

#include <stdio.h> 
#include <stdlib.h> 
 
int main() 
{ 
    int total_blocks, head_pos, requests[100], n, i, j, temp, head_moves = 0; 
 
    // Accepting user input 
    printf("Enter the total number of disk blocks: ");   
    scanf("%d", &total_blocks); 
 
    printf("Enter the disk request string (end with -1):\n"); 
    n = 0;     
    while (1)
    { 
        scanf("%d", &requests[n]);         
	if (requests[n] == -1)
	{             break; 
        }         n++; 
    } 
 
    printf("Enter the current head position: ");   
    scanf("%d", &head_pos); 
 
    printf("Enter the direction (L for Left, R for Right): ");  
    char dir;   
    scanf(" %c", &dir); 
 
    // Sorting the requests in ascending order 
    for (i = 0; i < n-1; i++)
    {         for (j = 0; j < n-i-1; j++)
    {             if (requests[j] > requests[j+1])
    {                 temp = requests[j];          
    requests[j] = requests[j+1];                
    requests[j+1] = temp; 
            } 
        } 
    } 
 
    // Finding the index of the request closest to the head position     
    int index;    
    for (i = 0; i < n; i++) 
    {         if (head_pos <= requests[i])
    {             index = i;          
    break; 
        } 
    } 
 
    // Traversing right and then left   
    if (dir == 'R')
    {         for (i = index; i < n; i++)
    {             printf("%d ", requests[i]); 
    head_moves += abs(requests[i] - head_pos);         
    head_pos = requests[i]; 
        }        
	for (i = index-1; i >= 0; i--)
	{             printf("%d ", requests[i]);      
	head_moves += abs(requests[i] - head_pos);     
	head_pos = requests[i]; 
        } 
    } 
 
    // Traversing left and then right    
    else {         for (i = index-1; i >= 0; i--) 
    {             printf("%d ", requests[i]);      
    head_moves += abs(requests[i] - head_pos);          
    head_pos = requests[i]; 
        }         for (i = index; i < n; i++)
	{             printf("%d ", requests[i]);  
	head_moves += abs(requests[i] - head_pos);           
	head_pos = requests[i]; 
        } 
    } 
 
    // Displaying the total number of head movements 
    printf("\nTotal number of head movements: %d\n", head_moves); 
 
    return 0; 
} 
 Q.2 Write a C program to simulate Banker’s algorithm for the purpose of deadlock avoidance. Consider
the following snapshot of system, A, B, C and D is the resource type.
Process	Allocation	Max	Available
	A	B	C	D	A	B	C	D	A	B	C	D
P0	0	3	2	4	6	5	4	4	3	4	4	2
P1	1	2	0	1	4	4	4	4				
P2	0	0	0	0	0	0	1	2				
P3	3	3	2	2	3	9	3	4				
P4	1	4	3	2	2	5	3	3				
P5	2	4	1	4	4	6	3	4				
•	Calculate and display the content of need matrix?
Is the system in safe state? If display the safe sequence.


#include<stdio.h>  
int A[10][10],M[10][10],N[10][10],Av[10],nor,nop;  
void AcceptData(int X[][10])  
{  
int i,j;  
for(i=0;i<nop;i++)  
{  
printf("P%d\n",i);  
for(j=0;j<nor;j++)  
{  
printf("%c: ",65+j);  
scanf("%d",&X[i][j]);  
}  }  
}  
void AcceptAvailability()  
{  int i;  
for(i=0;i<nor;i++)  
{  
printf("%c: ",65+i);  
scanf("%d",&Av[i]);  
}  
} 
void DisplayData()  
{  
int i,j;  
printf("\n\tAllocation\t\tMax\t\tNeed\n");  
printf("\t");  for(i=0;i<3;i++)  
{  
for(j=0;j<nor;j++)  printf("%4c",65+j);  
printf("\t");  

}  
for(i=0;i<nop;i++)  
{  
printf("\nP%d\t",i);
for(j=0;j<nor;j++)  
printf("%4d",A[i][j]); 
printf("\t");  
for(j=0;j<nor;j++)  
printf("%4d",M[i][j]);  
printf("\t");
for(j=0;j<nor;j++)  
printf("%4d",N[i][j]);  
}  
printf("\nAvailable\n"); 
for(j=0;j<nor;j++)  
printf("%4d",Av[j]);  
}  
void CalcNeed()  
{  
int i,j;  
for(i=0;i<nop;i++) 
for(j=0;j<nor;j++)  
N[i][j] = M[i][j] - A[i][j];  
}  
void main()  
{  
printf("\nEnter No.of Processes & No.of Resources: ");  
scanf("%d %d",&nop,&nor); 
printf("Enter Allocation\n"); 
AcceptData(A);  
printf("Enter Max Requirement\n"); 
AcceptData(M);  
printf("Enter Availability\n");  
AcceptAvailability();  
CalcNeed();  
DisplayData();  
}
