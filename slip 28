Q.1 Write a simulation program for disk scheduling using C-LOOK algorithm. Accept total number of disk blocks, disk request string, and current head position from the user. Display the list of request in the order in which it is served. Also display the total number of head moments. 
 
56, 59, 40, 19, 91, 161, 151, 39, 185 
 
Start Head Position: 48 
 
Direction: User Defined 
 
Ans:- 
#include<stdio.h> 
#include<stdlib.h> 
 
int main() {     int queue[100], n, head, i, j, k, seek_time = 0, diff;     float avg_seek_time; 
 
    printf("Enter the number of disk blocks: ");     scanf("%d", &n); 
 
    printf("Enter the disk request string: "); 
    for(i = 0; i < n; i++)         scanf("%d", &queue[i]); 
 
    printf("Enter the current head position: ");     scanf("%d", &head); 
 
    printf("Enter the direction (0 for left, 1 for right): ");     scanf("%d", &k); 
 
    // Sorting the request queue     for(i = 0; i < n-1; i++) {         for(j = i+1; j < n; j++) {             if(queue[i] > queue[j]) {                 int temp = queue[i];                 queue[i] = queue[j];                 queue[j] = temp; 
            } 
        } 
    } 
 
    int index;     for(i = 0; i < n; i++) {         if(queue[i] >= head) {             index = i;             break; 
        } 
    } 
 
    if(k == 0) {  // Head moving towards left direction         for(i = index-1; i >= 0; i--) {             seek_time += abs(head - queue[i]);             head = queue[i]; 
        } 
        seek_time += head;         head = 0;         for(i = n-1; i >= index; i--) {             seek_time += abs(head - queue[i]);             head = queue[i]; 
        } 
    } 
    else {  // Head moving towards right direction         for(i = index; i < n; i++) {             seek_time += abs(head - queue[i]);             head = queue[i]; 
        } 
        seek_time += abs(head - (n-1));         head = n-1;         for(i = index-1; i >= 0; i--) {             seek_time += abs(head - queue[i]);             head = queue[i]; 
        } 
    } 
 
    avg_seek_time = (float)seek_time / n; 
 
    printf("\nOrder of disk requests served:\n");     for(i = 0; i < n; i++)         printf("%d ", queue[i]); 
 
    printf("\n\nTotal number of head movements: %d", seek_time);     printf("\nAverage seek time: %f", avg_seek_time); 
 
    return 0; 
} 
 
 

Q2. 	Write a program to simulate Contiguous file allocation method. Assume disk with nnumber of blocks. Give value of n as input. Randomly mark some block as allocated andaccordingly maintain the list of free blocks Write menu driver program with menu options as mentioned above and implement each option.
Show Bit Vector	Create New File	Show Directory	Exit
#include <stdio.h> 
#include <stdlib.h> 
#include <stdbool.h> 
 
int *bitVector; int totalBlocks; 
 
void initializeBitVector() {     bitVector = (int*) malloc(totalBlocks * sizeof(int));     for(int i = 0; i < totalBlocks; i++) {         bitVector[i] = rand() % 2; 
    } 
} 
 
void showBitVector() {     printf("Bit Vector:\n");     for(int i = 0; i < totalBlocks; i++) {         printf("%d ", bitVector[i]); 
    } 
    printf("\n"); 
} 
 
void deleteFile() {     int startBlock, fileSize;     printf("Enter starting block of file to be deleted: ");     scanf("%d", &startBlock);     printf("Enter file size: ");     scanf("%d", &fileSize); 
 
    if(startBlock < 0 || startBlock >= totalBlocks || startBlock + fileSize > totalBlocks) {         printf("Invalid input\n");         return; 
    } 
 
    for(int i = startBlock; i < startBlock + fileSize; i++) {         if(bitVector[i] == 0) { 
            printf("Error: Block %d is not allocated\n", i);             return; 
        } 
    } 
 
    for(int i = startBlock; i < startBlock + fileSize; i++) {         bitVector[i] = 0; 
    } 
 
    printf("File deleted successfully\n"); 
} 
 
int main() {     printf("Enter total number of blocks in disk: ");     scanf("%d", &totalBlocks);     initializeBitVector(); 
 
    while(true) {         printf("\nMenu:\n1. Show Bit Vector\n2. Delete File\n3. Exit\n");         int choice;         scanf("%d", &choice);         switch(choice) {             case 1:                 showBitVector();                 break;             case 2:                 deleteFile();                 break;             case 3: 
                printf("Exiting...\n");                 return 0;             default: 
                printf("Invalid choice\n"); 
        } 
    } 
}
