Q.1 Write a program to simulate Contiguous file allocation method. Assume disk with n number of blocks. Give value of n as input. Randomly mark some block as allocated and accordingly maintain the list of free blocks Write menu driver program with menu options as mentioned above and implement each option. 
•	Show Bit Vector 
•	Create New File 
•	Show Directory 
•	Exit 
Ans  
 #include<stdio.h>  
#include<string.h> 
#include<stdlib.h> 
struct freelist  
{  int start; 
int size;  
struct freelist *next;  
};  
struct usedlist  
{  
char fname[10];  
int fstart;  
int fsize;  
};  
struct freelist *head=NULL,*new=NULL,*temp,*prev,*temp1;  
struct usedlist dir_ent[10]; 
int dir_index=0;
main()  
{  int ch,i;  
char filename[10];  
create();
do 
{  
printf("\n*****menu*******\n");  
printf("1.Create file\n");  
printf("2. Show Free and Used Block list\n");  
printf("3. exit\n"); 
printf("Enter your choice: ");  
scanf("%d",&ch); 
switch(ch)  
{  
case 1: allocate();  
break;  
case 2: printf("\nThe free list is");  
printf("\nStartBlock\tSize\n");  
for (temp=head;temp!=NULL; temp=temp->next)  
{  
printf("%d",temp->start);  
printf("\t%d\n",temp->size);  
}  
printf("The used list is");  
printf("\nFilename\tStart\tLength\n");  
for(i=0;i<dir_index;i++)  
{  
printf("%s\t%d\t\t%d\n",dir_ent[i].fname,dir_ent[i].fstart,dir_ent[i].fsize);  
}  
break; 
case 3: exit(0);
break; 
}  
}while (ch!=3);  
}  
create()  
{  
int no_of_blocks;  
printf("Enter number of blocks\n");  
scanf("%d",&no_of_blocks); 
new = (struct freelist*)malloc(sizeof(struct freelist));
head=new;  
new->start=0;  
new->size=no_of_blocks;  
new->next=NULL;  
}  
allocate()  
{  
int s, allocated=0;  
char filename[10];
printf("enter file name \n");  
scanf("%s",filename);  
printf("enter size of a file in blocks\n");  
scanf("%d",&s);  
for(temp=head;temp!=NULL;)  
{  
if(temp->size < s)  
temp=temp->next;  
else 
{ 
//temp->size-=s; 
strcpy(dir_ent[dir_index].fname,filename); 
dir_ent[dir_index].fstart=temp->start;  
temp->start+=s;  
dir_ent[dir_index].fsize=s;
dir_index++;  
allocated=1;
break;  
}  
if (temp==NULL && allocated==0)  
printf("Disk space not available\n");  
}  } 




Q.2	Write a simulation program for disk scheduling using C-SCAN algorithm. 
Accept total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number of head moments.
33, 99, 142, 52, 197, 79, 46, 65
Start Head Position: 72 Direction: Left.
Ans 
#include<stdio.h>
#include<stdlib.h> 
int main()
{
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
printf("Enter the number of Requests\n"); scanf("%d",&n);
printf("Enter the Requests sequence\n"); for(i=0;i<n;i++)
 scanf("%d",&RQ[i]);
printf("Enter initial head position\n");
scanf("%d",&initial);
printf("Enter total disk size\n"); 
scanf("%d",&size);
printf("Enter the head movement direction for high 1 and for low 0\n"); 
scanf("%d",&move);

// logic for C-Scan disk scheduling

/*logic for sort the request array */ for(i=0;i<n;i++)
{
for( j=0;j<n-i-1;j++)
{
if(RQ[j]>RQ[j+1])
{
int temp; temp=RQ[j]; RQ[j]=RQ[j+1];
RQ[j+1]=temp;
}

}
}

int index; for(i=0;i<n;i++)
{
if(initial<RQ[i])
{
index=i; break;
}
}

// if movement is towards high value if(move==1)
{
for(i=index;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); initial=RQ[i];
}
// last movement for max size
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
/*movement max to min disk */ 
TotalHeadMoment=TotalHeadMoment+abs(size-1-0); 
initial=0;
for( i=0;i<index;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i];

}
}
// if movement is towards low value else
{
for(i=index-1;i>=0;i--)
 
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
// last movement for min size 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
/*movement min to max disk */
TotalHeadMoment=TotalHeadMoment+abs(size-1-0); initial =size-1;
for(i=n-1;i>=index;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];

}
}

printf("Total head movement is %d",TotalHeadMoment); 
return 0;
}

