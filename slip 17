Slip No 17 
Q.1 Write a program to simulate Indexed file allocation method. 
Assume disk with n number of blocks. Give value of n as input. 
Randomly mark some block as allocated and accordingly maintain the list of free blocks.
Write menu driver program with menu options as mentioned above and implement each option. 
 
Show Bit Vector 
Show Directory 
Delete Already File 
Exit 
 
Ans:- 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define BLOCK_SIZE 1024 
 
int *disk; int *free_blocks; int *index_table; int n_blocks; 
 
void initialize_disk(int n) 
{ 
   
     int i; 
    disk = (int *) malloc(n * sizeof(int));   
    free_blocks = (int *) malloc(n * sizeof(int));  
    index_table = (int *) calloc(10, sizeof(int));
    // Assume we have 10 files 
    n_blocks = n;   
    srand(time(NULL)); 
    for (i = 0; i < n; i++) 
    {         if ((double) rand() / RAND_MAX < 0.5)
    { 
            disk[i] = 1;        
            } else
            {           
            disk[i] = 0;           
            free_blocks[free_blocks[0] + 1] = i;    
            free_blocks[0]++; 
        } 
    } 
} 
 
void show_bit_vector() 
{ 
    int i, j;
    printf("Bit Vector:\n");     
    for (i = 0; i < n_blocks; i += 10) 
    {         for (j = i; j < i + 10; j++)
    {             if (j >= n_blocks) 
    {                 break;         
    } 
            printf("%d ", disk[j]); 
        }         printf("\n"); 
    } 
} 
 
void show_directory() { 
    /* 
     * Shows the directory for the disk. 
     */    
     int i, j; 
    printf("Directory:\n");    
    for (i = 0; i < 10; i++)
    {        
    printf("%d: ", i);   
    for (j = 0; j < index_table[i]; j++)
    { 
            printf("%d ", index_table[i * BLOCK_SIZE + j]); 
        }         printf("\n"); 
    } 
} 
 
void delete_file(int file_index)
{ 
    
    int i, block_index;   
    for (i = 0; i < index_table[file_index]; i++)
    {         
    block_index = index_table[file_index * BLOCK_SIZE + i];
    disk[block_index] = 0;       
    free_blocks[free_blocks[0] + 1] = block_index;   
    free_blocks[0]++; 
    } 
    index_table[file_index] = 0; 
} 
 
int main() 
{     int choice, file_index; 
printf("Enter the number of blocks on the disk: ");   
scanf("%d", &n_blocks);   
initialize_disk(n_blocks); 
 
    while (1)
    {         
    printf("\nMenu:\n");      
    printf("1. Show Bit Vector\n");        
    printf("2. Show Directory\n");      
    printf("3. Delete a File\n");        
    printf("4. Exit\n");         
    printf("Enter your choice: ");         
    scanf("%d", &choice); 
 
        switch (choice)
        {             case 1:  
                             show_bit_vector();               
                             break;            
                       case 2:                
                       
                                  show_directory();               
                                    break;                                                                      
                     case 3: 
                                printf("Enter the index of the file to delete: ");        
                                scanf("%d", &file_index);               
                                delete_file(file_index);             
                                printf("File %d deleted.\n", file_index);           
                                break;             
                                case 4: 
                         default:                
                              printf("Invalid choice. Please try again.\n");                
                              break; 
                              
                              
                                 return 0; 
        } 
    } 
} 
 
Q.2 Write a simulation program for disk scheduling using LOOK algorithm.
Accept total number of disk blocks, disk request string, and current head position from the user.
Display the list of request in the order in which it is served. Also display the total number of head moments. 
23, 89, 132, 42, 187, 69, 36, 55 Direction: Left 
Start Head Position: 40 
 
Ans:- 
#include <stdio.h> 
#include <stdlib.h> 
 
#define DIRECTION_LEFT 0 
#define DIRECTION_RIGHT 1 
 
int abs(int x) { 
    return x >= 0 ? x : -x; 
} 
 
int compare(const void *a, const void *b)
{     return *(int *) a - *(int *) b; 
} 
 
void print_request_order(int *request_order, int n) 
{ 
    /* 
*	Prints the order in which the disk requests are served. 
     */     int i; 
    printf("Order of requests served: ");    
    for (i = 0; i < n; i++)
    { 
        printf("%d ", request_order[i]); 
    } 
    printf("\n"); 
} 
 
void print_head_movements(int head_movements)
{ 
    /* 
*	Prints the total number of head movements. 
     */ 
    printf("Total number of head movements: %d\n", head_movements); 
} 
 
int main() 
{     int n_blocks, head_pos, direction, n_requests, i, j, k, head_movements = 0, min_request, max_request, *requests, *request_order;     printf("Enter the total number of disk blocks: ");     scanf("%d", &n_blocks);     printf("Enter the current head position: ");     scanf("%d", &head_pos); 
    printf("Enter the disk request string (separated by spaces): ");   
    scanf("%d", &n_requests);    
    requests = (int *) malloc(n_requests * sizeof(int));   
    request_order = (int *) malloc(n_requests * sizeof(int));  
    for (i = 0; i < n_requests; i++)
    {         scanf("%d", &requests[i]); 
    } 
    printf("Enter the direction (0 for left, 1 for right): "); 
    scanf("%d", &direction); 
 
    qsort(requests, n_requests, sizeof(int), compare); 
 
    for (i = 0; i < n_requests; i++) 
    {         if (requests[i] >= head_pos)
    {             break; 
        }     }     k = i; 
    if (direction == DIRECTION_LEFT) 
    {         min_request = 0;   
    max_request = k - 1;         
    for (i = k - 1; i >= 0; i--)
    {             request_order[max_request - i] = requests[i]; 
        } 
        for (i = k; i < n_requests; i++)
        {             
        request_order[i] = requests[i]; 
        } 
    } 
    else 
    {        
    min_request = k;   
    max_request = n_requests - 1;         
    for (i = k; i < n_requests; i++) 
    {             request_order[i - k] = requests[i]; 
        } 
        for (i = k - 1; i >= 0; i--) 
        {             request_order[n_requests - 1 - i] = requests[i]; 
        } 
    } 
 
    for (i = 0; i < n_requests; i++)
    {         head_movements += abs(request_order[i] - head_pos); 
    head_pos = request_order[i]; 
    } 
 
    print_request_order(request_order, n_requests); 
    print_head_movements(head_movements); 
 
    return 0; 
} 
