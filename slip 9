. Consider the following snapshot of system, A, B, C, D is the resource type.

                          Process	           Allocation	         Max	           Available
                                            	A	B	C	D	          A	B	C	D   	      A B C D
                             P0	              0	0	1	2          	0	0	1	2	          1 5 2 0
                             P1	              1	0	0	0	          1	7	5	0				
                             P2	              1	3	5	4	          2	3	5	6				
                             P3	              0	6	3	2	          0	6	5	2				
                             P4	              0	0	1	4         	0	6	5	6				

Using Resource –Request algorithm to Check whether the current system is in safe state or not .
Ans 

#include<stdio.h> 
#include<stdlib.h>
int ind,A[10][10],M[10][10],N[10][10],Av[10],Safe[10],Finish[10],nor,nop,work[10],req[10][10];
void AcceptData(int X[][10])
{
int i,j; for(i=0;i<nop;i++)
{
printf("P%d:\n",i); for(j=0;j<nor;j++)
{
printf("%c:",65+j); scanf("%d",&X[i][j]);
}
}
}
void AcceptAvailability()
{
int i; for(i=0;i<nor;i++)
{
printf("%c",65+i);
scanf("%d",&Av[i]);
 
work[i]=Av[i];
}
}
void DisplayData()
{
int i,j; printf("\n\tAllocation\t\tMax\t\tNeed\n"); printf("\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++) printf("%4c",65+j);
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t",i); for(j=0;j<nor;j++) printf("%4d",A[i][j]);
printf("\t"); 
for(j=0;j<nor;j++) 
printf("%4d",M[i][j]); 
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",N[i][j]);
}
printf("\nAvailable\n”); for(j=0;j<nor;j++) printf("%4d",work[j]);
}
void CalcNeed()
{
int i,j; for(i=0;i<nop;i++) for(j=0;j<nor;j++) N[i][j]=M[i][j]-A[i][j];
}
void Resource_Request(int no)
{
int i,f11=0,f12=0; for(i=0;i<nor;i++)
{
if(req[no][i]<=N[no][i]) f11=1;
else f11=0;
} if(f11==0)
{
printf("\n Error!Process has exceeded its maximum claim"); 
exit(0);
} if(f11==1)
{
for(i=0;i<nor;i++)
{
if(req[no][i]<=work[i]) f12=1;
else f12=0;
} if(f12==0)
{
printf("\n Process has to wait for resources"); exit(0);
 
}
}
if(f11==1 && f12==1)
{
for(i=0;i<nor;i++)
{
work[i]=work[i]-req[no][i];
A[no][i]=A[no][i]+req[no][i];
N[no][i]=N[no][i]-req[no][i];
}
}
}
int checkNeed(int pno)
{
int i; for(i=0;i<nor;i++) if(N[pno][i]>work[i]) return(0);
return(1);
}
void Banker()
{
int i=0,j=0,k=0,flag=0; while(flag<2)
{
if(!Finish[i])
{
printf("\nNeed%d(",i); for(j=0;j<nor;j++) 
printf("%d",N[i][j]); 
if(!checkNeed(i))
{
printf("\b)>Work"); 
for(j=0;j<nor;j++) 
printf("%d",work[j]);
printf("\b)");
printf("\nNeed Cannot be satisfied,consider next process");
}
else
{
printf("b)<=Work("); 
for(j=0;j<nor;j++) 
printf("%d,",work[j]); 
printf("\b)");
printf("\nNeed can be satisfied,so allocate required resources"); 
printf("\nWork(%d)=",i);
for(j=0;j<nor;j++)
{
work[j]+=A[i][j];
}
for(j=0;j<nor;j++) printf("%4d",work[j]);
printf("\nAfter P%d terminates it will release all its resources\n",i); 
Safe[k++]=i;
Finish[i]=1;
}
}
if((i+1)%nop==0) flag++; 
i=(i+1)%nop;
}
if(k==nop)
{
printf("\nSystem is in safe state..."); 
printf("\nSafe Sequence:");
 
for(i=0;i<k;i++) printf("P%d->",Safe[i]);
printf("\b\b");
}
else
{
printf("\nSystem is in not safe state...");
}
}
int main()
{
int i;
printf("\nEnter no of processes & No of Resources:");
scanf("%d%d",&nop,&nor);
printf("Enter Allocation\n"); 
AcceptData(A);
printf("Enter Max Requirement\n"); 
AcceptData(M);
printf("Enter Availability\n"); 
AcceptAvailability(); 
CalcNeed();
DisplayData();
Banker();
printf("\n Enter Process number from which request arrives:"); 
scanf("%d",&ind);
printf("\nEnter request for process%d\n",ind); 
for(i=0;i<nor;i++)
{
printf("%c",65+i);
scanf("%d",&req[ind][i]);
}
for(i=0;i<nop;i++) Finish[i]=0; for(i=0;i<nor;i++) work[i]=Av[i]; 
Resource_Request(ind); 
Banker();
return(0);
}


Q.2 Write a simulation program for disk scheduling using LOOK algorithm. Accept total number of disk blocks, disk request string, and current head position from the user. Display the list of request in the order in which it is served. Also display the total number of head moments. [15] 
176, 79, 34, 60, 92, 11, 41, 114 
Starting Head Position: 65 
Direction: Left 

#include<stdio.h>
int ReqString[20],nor,nob,start,thm,min[10],max[10]; char direction;
int getmin()
{
int i,j=0,min=999; for(i=0;i<nor;i++) if(ReqString[i]<=min) min=ReqString[i]; return min;
}
int getmax()
{
int i,j=0,max=0; for(i=0;i<nor;i++) if(ReqString[i]>max) max=ReqString[i]; return max;
}
main()
{
int i,j,k,max,min;
printf("\nEnter No.of Requests: "); scanf("%d",&nor);
printf("\nEnter Requests:\n"); for(i=0;i<nor;i++)
{
printf("[%d]=",i);
scanf("%d",&ReqString[i]);
}
printf("\nEnter No.of Cylinders: "); scanf("%d",&nob);
printf("\nEnter Start Block: "); scanf("%d",&start); printf("\nEnter Direction: "); scanf(" %c",&direction); min=getmin(); max=getmax(); if(direction=='L')
{
printf("\n%d-%d",start,min); thm+=start-min;
start=min;
printf("\n%d-%d",max,start); thm+=max-start;
}
else if(direction=='R')
{
printf("\n%d-%d",start,max); thm+=max-start;
start=max;
printf("\n%d-%d",start,min); thm+=start-min;
}
printf("\nTotal Head Movement: %d",thm);
}

